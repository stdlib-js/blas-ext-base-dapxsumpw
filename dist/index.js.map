{
  "version": 3,
  "sources": ["../lib/ndarray.js", "../lib/dapxsumpw.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar floor = require( '@stdlib/math-base-special-floor' );\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Adds a constant to each double-precision floating-point strided array element and computes the sum using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783\u201399. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = dapxsumpw( 4, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction dapxsumpw( N, alpha, x, stride, offset ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn alpha + x[ offset ];\n\t}\n\tix = offset;\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += alpha + x[ ix ];\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = alpha + x[ ix ];\n\t\ts1 = alpha + x[ ix+stride ];\n\t\ts2 = alpha + x[ ix+(2*stride) ];\n\t\ts3 = alpha + x[ ix+(3*stride) ];\n\t\ts4 = alpha + x[ ix+(4*stride) ];\n\t\ts5 = alpha + x[ ix+(5*stride) ];\n\t\ts6 = alpha + x[ ix+(6*stride) ];\n\t\ts7 = alpha + x[ ix+(7*stride) ];\n\t\tix += 8 * stride;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 += alpha + x[ ix ];\n\t\t\ts1 += alpha + x[ ix+stride ];\n\t\t\ts2 += alpha + x[ ix+(2*stride) ];\n\t\t\ts3 += alpha + x[ ix+(3*stride) ];\n\t\t\ts4 += alpha + x[ ix+(4*stride) ];\n\t\t\ts5 += alpha + x[ ix+(5*stride) ];\n\t\t\ts6 += alpha + x[ ix+(6*stride) ];\n\t\t\ts7 += alpha + x[ ix+(7*stride) ];\n\t\t\tix += 8 * stride;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = ((s0+s1) + (s2+s3)) + ((s4+s5) + (s6+s7));\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\ts += alpha + x[ ix ];\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn dapxsumpw( n, alpha, x, stride, ix ) + dapxsumpw( N-n, alpha, x, stride, ix+(n*stride) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = dapxsumpw;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar sum = require( './ndarray.js' );\n\n\n// MAIN //\n\n/**\n* Adds a constant to each double-precision floating-point strided array element and computes the sum using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783\u201399. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = dapxsumpw( N, 5.0, x, 1 );\n* // returns 16.0\n*/\nfunction dapxsumpw( N, alpha, x, stride ) {\n\tvar ix;\n\tvar s;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn alpha + x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += alpha + x[ ix ];\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\treturn sum( N, alpha, x, stride, ix );\n}\n\n\n// EXPORTS //\n\nmodule.exports = dapxsumpw;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar dapxsumpw = require( './dapxsumpw.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( dapxsumpw, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = dapxsumpw;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Add a constant to each double-precision floating-point strided array element and compute the sum using pairwise summation.\n*\n* @module @stdlib/blas-ext-base-dapxsumpw\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var dapxsumpw = require( '@stdlib/blas-ext-base-dapxsumpw' );\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n*\n* var v = dapxsumpw( 3, 5.0, x, 1 );\n* // returns 16.0\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var dapxsumpw = require( '@stdlib/blas-ext-base-dapxsumpw' );\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = dapxsumpw.ndarray( 4, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nvar tryRequire = require( '@stdlib/utils-try-require' );\nvar isError = require( '@stdlib/assert-is-error' );\nvar main = require( './main.js' );\n\n\n// MAIN //\n\nvar dapxsumpw;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( isError( tmp ) ) {\n\tdapxsumpw = main;\n} else {\n\tdapxsumpw = tmp;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dapxsumpw;\n\n// exports: { \"ndarray\": \"dapxsumpw.ndarray\" }\n"],
  "mappings": "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",
  "names": ["require_ndarray", "__commonJSMin", "exports", "module", "floor", "BLOCKSIZE", "dapxsumpw", "N", "alpha", "x", "stride", "offset", "ix", "s0", "s1", "s2", "s3", "s4", "s5", "s6", "s7", "M", "s", "n", "i", "require_dapxsumpw", "__commonJSMin", "exports", "module", "sum", "dapxsumpw", "N", "alpha", "x", "stride", "ix", "s", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "dapxsumpw", "ndarray", "join", "tryRequire", "isError", "main", "dapxsumpw", "tmp"]
}
